# MIT License
#
# Copyright (c) 2019 The Regents of the University of California
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import absolute_import
import sys
import os
import imp
import ctypes
import platform
import warnings
import importlib
import traceback
from ctypes.util import find_library

__author__ = "Jonathan Madsen"
__copyright__ = "Copyright 2019, The Regents of the University of California"
__credits__ = ["Jonathan Madsen"]
__license__ = "MIT"
__version__ = "@PROJECT_VERSION@"
__maintainer__ = "Jonathan Madsen"
__email__ = "jrmadsen@lbl.gov"
__status__ = "Development"

# get the path to this directory
this_path = os.path.abspath(os.path.dirname(__file__))

try:
    from . import libinstrument_benchmark_enabled as enabled
    from . import libinstrument_benchmark_disabled as disabled

    __all__ = ['version_info',
               'build_info',
               'version',
               # --------------- modules ---------------#
               'enabled',
               'disabled',
               ]

except Exception as e:
    exc_type, exc_value, exc_traceback = sys.exc_info()
    traceback.print_exception(exc_type, exc_value, exc_traceback)

    __all__ = ['version_info',
               'build_info',
               'version',
               ]

sys.modules[__name__].__setattr__("version_info", (@PROJECT_VERSION_MAJOR@, @PROJECT_VERSION_MINOR@, @PROJECT_VERSION_PATCH@))
sys.modules[__name__].__setattr__("version", "@PROJECT_VERSION@")
sys.modules[__name__].__setattr__("build_info", {"library_architecture": "@CMAKE_SYSTEM_PROCESSOR@",
                                                 "system_name": "@CMAKE_SYSTEM_NAME@",
                                                 "system_version": "@CMAKE_SYSTEM_VERSION@",
                                                 "build_type": "@CMAKE_BUILD_TYPE@",
                                                 "compiler": "@CMAKE_CXX_COMPILER@",
                                                 "compiler_id": "@CMAKE_CXX_COMPILER_ID@",
                                                 "compiler_version": "@CMAKE_CXX_COMPILER_VERSION@"
                                                 })

version_info = sys.modules[__name__].__getattribute__("version_info")
'''Tuple of version fields'''

build_info = sys.modules[__name__].__getattribute__("build_info")
'''Build information'''

version = sys.modules[__name__].__getattribute__("version")
'''Version string'''
